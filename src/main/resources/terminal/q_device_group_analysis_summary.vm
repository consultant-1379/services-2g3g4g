##
## Device Analysis - device groups summary
## See http://atrclin2.athtem.eei.ericsson.se/wiki/index.php/ENIQ_Events_Services_Design_Rules for the design rules
## on exclusive TAC handling that apply to this query
##
## Description:
##
##     Get the nominated or most popular device groups summary
##
##
## Velocity Parameter:
##
## AGGREGATION_TABLES : a TechPackTables object containing the Aggregation views applicable for time range
## RAW_TABLES : a TechPackTables object containing the Raw tables applicable for this time range
## useAggregationTables : a boolean indicating whether to use the aggregation tables or raw tables 
## for error/success part of the query
## count : number of the topN most popular device groups
##
## Named PreparedStatement Parameter:
##
##    :dateFrom - starting time
##    :dateTo - ending time
##    :groupColumn - group name
##
## Scenarios:
##
##  1. Device group summary
##       
##     timerange
##     :dateFrom :dateTo :groupColumn
##
##  2. Most popular device group summary
## 
##     timerange, count
##     :dateFrom :dateTo
##

#DEFINE_CONSTANTS()
#set($columnsToSelectForNoOfErrorsOrSuccesses=["TAC"])
#set($columnsToSelectForNoOfErrSubs=["IMSI"])
#set($exclusiveTacGroup=$ApplicationConstants.EXCLUSIVE_TAC_GROUP_NAME)

#macro(SUM_GROUPS_FROM_AGGREGATION_VIEW $view $columnsToSum)
    select
        GROUP_NAME,
        #foreach($column in $columnsToSum)
            sum($column) as $column
            #if ( $velocityCount < $columnsToSum.size())
                    ,
            #end
        #end
    from
        $view aggview,
        dc.GROUP_TYPE_E_TAC tacgroup
    where
        aggview.TAC = tacgroup.TAC
        AND GROUP_NAME <> '$exclusiveTacGroup'
        #AND_DATETIME_RANGE()
    group by
        GROUP_NAME
#end

#macro (FIND_COLUMNS_FROM_RAW_TABLE_WHERE_TAC_IS_IN_A_TAC_GROUP $rawtables $rawview $columnsToIncludeInResult)
    (
    #foreach ($rawtable in $rawtables)
        select
            tacgroup.GROUP_NAME,
            #foreach ($columnToInclude in $columnsToIncludeInResult)
                rawTable.$columnToInclude
                #if($velocityCount < $columnsToIncludeInResult.size())
                        ,
                #end
            #end
        from
            dc.$rawtable as rawTable,
            dc.GROUP_TYPE_E_TAC tacgroup
        where
            rawTable.TAC = tacgroup.TAC AND
            tacgroup.GROUP_NAME <> '$exclusiveTacGroup' AND
            #if ($timerange=="TR_4")
                #GET_DATE_RANGE_LOCAL()
            #else
                #GET_DATETIME_RANGE()
            #end
            #if($velocityCount < $rawtables.size())
                    union all
            #end
    #end
    ) as $rawview
#end


#macro (FIND_ERR_SUBSCRIBERS_FROM_RAW_TABLE_WHERE_TAC_IS_IN_A_TAC_GROUP $rawtables $rawview $columnsToIncludeInResult)
    (
    #foreach ($rawtable in $rawtables)
        select
            tacgroup.GROUP_NAME,
            #foreach ($columnToInclude in $columnsToIncludeInResult)
                rawTable.$columnToInclude
                #if($velocityCount < $columnsToIncludeInResult.size())
                        ,
                #end
            #end
        from
            dc.$rawtable as rawTable,
            dc.GROUP_TYPE_E_TAC tacgroup
        where
            rawTable.TAC = tacgroup.TAC AND
            tacgroup.GROUP_NAME <> '$exclusiveTacGroup' AND
            #if ($timerange=="TR_4")
                #GET_DATE_RANGE_LOCAL()
            #else
                #GET_DATETIME_RANGE()
            #end
            group by
            #foreach ($columnToInclude in $columnsToIncludeInResult)
                rawTable.$columnToInclude,
            #end
            tacgroup.GROUP_NAME
            #if($velocityCount < $rawtables.size())
                    union all
            #end
    #end
    ) as $rawview
#end

select
    #if($count > 0)
        top $count
    #end
    rank() over (order by OCCURRENCES desc) as RANK,
    isnull(err.GROUP_NAME, suc.GROUP_NAME) as GROUP_NAME,
    sum(isnull(NO_OF_ERRORS, 0)) as NO_OF_ERRORS,
    sum(isnull(NO_OF_SUCCESSES,0)) as NO_OF_SUCCESSES,
    NO_OF_ERRORS+NO_OF_SUCCESSES as OCCURRENCES,
    #CALCULATE_KPI_RATIO() as SUCCESS_RATIO,
    isnull(max(impacted_subs.NO_OF_TOTAL_ERR_SUBSCRIBERS),0) as NO_OF_TOTAL_ERR_SUBSCRIBERS
from
(
    #if($useAggregationTables)
    ##need to sum on the union of the sums from the aggregation tables (otherwise get duplicate results
    ##on joining these results with the success counts from the subquery below)
    select
        GROUP_NAME,
        sum(NO_OF_ERRORS) as NO_OF_ERRORS
    from (
        #foreach ($aggView in $AGGREGATION_TABLES.getErrTables())
            #SUM_GROUPS_FROM_AGGREGATION_VIEW($aggView ["NO_OF_ERRORS"])

            #if($velocityCount < $AGGREGATION_TABLES.getSucTables().size())
                union all
            #end
        #end
)as total_errors(GROUP_NAME, NO_OF_ERRORS)
group by
    GROUP_NAME
#else
    select
        GROUP_NAME,
        count(*) as NO_OF_ERRORS
    from
        #FIND_COLUMNS_FROM_RAW_TABLE_WHERE_TAC_IS_IN_A_TAC_GROUP($RAW_TABLES.getErrTables() "temp_err" $columnsToSelectForNoOfErrorsOrSuccesses)
    group by
        GROUP_NAME
#end
) as err(GROUP_NAME, NO_OF_ERRORS)
full outer join (
    select
        GROUP_NAME,
        count(distinct(IMSI)) as NO_OF_TOTAL_ERR_SUBSCRIBERS
    from
       #FIND_ERR_SUBSCRIBERS_FROM_RAW_TABLE_WHERE_TAC_IS_IN_A_TAC_GROUP($RAW_TABLES.getErrTables() "rawview" $columnsToSelectForNoOfErrSubs)
    group by
       GROUP_NAME
)as impacted_subs(GROUP_NAME,NO_OF_TOTAL_ERR_SUBSCRIBERS)
on(err.GROUP_NAME = impacted_subs.GROUP_NAME)
full outer join    (
#if($useAggregationTables)
    select
        GROUP_NAME,
        sum(NO_OF_SUCCESSES) AS TOTAL_NO_OF_SUCCESSES
    from (
        #foreach ($aggView in $AGGREGATION_TABLES.getSucTables())
            #SUM_GROUPS_FROM_AGGREGATION_VIEW($aggView ["NO_OF_SUCCESSES"])

            #if($velocityCount < $AGGREGATION_TABLES.getSucTables().size())
                union all
            #end
        #end
    ) as total_successes
    where
        NO_OF_SUCCESSES is not null
    group by
        GROUP_NAME
#else
    select
        GROUP_NAME,
        count(*)
    from
        #FIND_COLUMNS_FROM_RAW_TABLE_WHERE_TAC_IS_IN_A_TAC_GROUP($RAW_TABLES.getSucTables() "temp_suc" $columnsToSelectForNoOfErrorsOrSuccesses)
    group by
        GROUP_NAME
#end
) as suc(GROUP_NAME, NO_OF_SUCCESSES)
on(
suc.GROUP_NAME = err.GROUP_NAME
)
group by
    GROUP_NAME
order by
    RANK
