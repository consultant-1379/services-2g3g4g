##=============================================================================
##
## Cause code analysis: detailed cause code/sub cause code data
## ------------------------------------------------------------
##
## List sub cause code detail for cause code including description & subscriber
##
## type : one of {SGSN, BSC, CELL, APN}
##
## NOTE: For subscriber session management, All the TACs will be considered. i.e, no blacklist TACs here
##
##=============================================================================

#DEFINE_CONSTANTS()
#SET_GROUP_TYPE($type)

#if(${type}==$TYPE_SGSN)
    #set($columns=[$SGSN])
#elseif(${type}==$TYPE_BSC)
    #set($columns=[$RAT,$VENDOR,$BSC])
#elseif(${type}==$TYPE_CELL)
    #set($columns=[$RAT,$VENDOR,$BSC,$CELL])
#elseif(${type}==$TYPE_APN)
    #set($columns=[$APN])
#end


#if(${groupDefinitions})
#set($groupDef = $groupDefinitions.get($groupType))
#set($groupTable = $groupDef.getTableName())
#set($groupnameColumn = $groupDef.getGroupNameColumn())
#set($joinKeys = $groupDef.getGroupKeys())
#end

#set($cptRefForSgeh="DIM_E_SGEH_CAUSE_PROT_TYPE")
#set($cptRefForLte="DIM_E_LTE_CAUSE_PROT_TYPE")
#set($etRefForSgeh="DIM_E_SGEH_EVENTTYPE")
#set($etRefForLte="DIM_E_LTE_EVENTTYPE")
#set($ccRefForSgeh="dc.DIM_E_SGEH_CAUSECODE")
#set($ccRefForLte="dc.DIM_E_LTE_CAUSECODE")
#set($sccRefForSgeh="dc.DIM_E_SGEH_SUBCAUSECODE")
#set($sccRefForLte="dc.DIM_E_LTE_SUBCAUSECODE")
#set($useNonLteTables=true)
#set($useLteTables=true)


#macro(CCAD_SGEH_QUERY $errTable $cptTable $etTable $ccTable $sccTable )
select sgehraw.CAUSE_PROT_TYPE, sgehcptref.CAUSE_PROT_TYPE_DESC, sgehraw.CAUSE_CODE, 
ccref.CAUSE_CODE_DESC,ccref.CAUSE_CODE_HELP, sgehraw.SUBCAUSE_CODE, sccref.SUBCAUSE_CODE_DESC,
sccref.SUBCAUSE_CODE_HELP, sgehetref.EVENT_ID, sgehetref.EVENT_ID_DESC, erref.EVENT_RESULT, erref.EVENT_RESULT_DESC, 
ratref.RAT, ratref.RAT_DESC, service_req.SERVICE_REQ_TRIGGER, service_req.SERVICE_REQ_TRIGGER_DESC, DATETIME_ID, 
EVENT_TIME, IMSI, sgehraw.TAC, tacref.MANUFACTURER, tacref.Marketing_Name, sgehraw.EVENT_SOURCE_NAME, 
sgehraw.HIERARCHY_3, sgehraw.HIERARCHY_2, sgehraw.HIERARCHY_1, sgehraw.VENDOR, ggsnref.GGSN_NAME, sgsnref.SGSN_NAME, 
LINKED_NSAPI, PDP_NSAPI_1, PDP_GGSN_IPADDRESS_1, PDP_GGSN_NAME_1, PDP_MS_IPADDRESS_1, PDP_NSAPI_2, PDP_GGSN_IPADDRESS_2, 
PDP_GGSN_NAME_2, PDP_MS_IPADDRESS_2, PAGING_ATTEMPTS, REQUEST_RETRIES, sgehraw.APN, MCC, MNC, RAC, LAC, UPDATE_TYPE, 
OLD_SGSN_IPADDRESS, OLD_MCC, OLD_MNC, OLD_RAC, OLD_LAC, TRANSFERRED_PDP, DROPPED_PDP, HLR, DEACTIVATION_TRIGGER
    from
        #temp_$errTable sgehraw,
        dc.$etTable sgehetref,
        dc.$cptTable sgehcptref,
        $ccTable ccref,
        $sccTable sccref,
        dc.DIM_E_SGEH_EVENTRESULT erref,
        dc.DIM_E_SGEH_TAC tacref,
        dc.DIM_E_SGEH_SGSN sgsnref,
        dc.DIM_E_SGEH_GGSN ggsnref,
        dc.DIM_E_SGEH_RAT ratref,
        dc.DIM_E_SGEH_SERVICE_REQ_TRIGGER service_req
    where
        sgehraw.EVENT_ID = sgehetref.EVENT_ID
        and sgehraw.CAUSE_PROT_TYPE *= sgehcptref.CAUSE_PROT_TYPE
        and sgehraw.CAUSE_PROT_TYPE *= ccref.CAUSE_PROT_TYPE
        and sgehraw.CAUSE_CODE *= ccref.CAUSE_CODE
        and sgehraw.SUBCAUSE_CODE *= sccref.SUBCAUSE_CODE
        and sgehraw.EVENT_RESULT = erref.EVENT_RESULT
        and sgehraw.TAC *= tacref.TAC
        and sgehraw.OLD_SGSN_IPADDRESS *= sgsnref.IP_ADDRESS
        and sgehraw.PDP_GGSN_IPADDRESS_1 *= ggsnref.GGSN_IPADDRESS
        and sgehraw.PDP_GGSN_IPADDRESS_2 *= ggsnref.GGSN_IPADDRESS
        and sgehraw.RAT = ratref.RAT
        and sgehraw.SERVICE_REQ_TRIGGER *= service_req.SERVICE_REQ_TRIGGER
#end

#macro(CCAD_LTE_QUERY $errTable $cptTable $etTable $ccTable $sccTable)
select lteraw.CAUSE_PROT_TYPE, cptref.CAUSE_PROT_TYPE_DESC, lteraw.CAUSE_CODE, ccref.CAUSE_CODE_DESC,ccref.CAUSE_CODE_HELP, 
lteraw.SUBCAUSE_CODE, sccref.SUBCAUSE_CODE_DESC,sccref.SUBCAUSE_CODE_HELP, etref.EVENT_ID, etref.EVENT_ID_DESC, erref.EVENT_RESULT, 
erref.EVENT_RESULT_DESC, ratref.RAT, ratref.RAT_DESC, service_req.SERVICE_REQ_TRIGGER, service_req.SERVICE_REQ_TRIGGER_DESC, 
DATETIME_ID, EVENT_TIME, IMSI, lteraw.TAC, tacref.MANUFACTURER, tacref.Marketing_Name, lteraw.EVENT_SOURCE_NAME, lteraw.HIERARCHY_3, 
lteraw.HIERARCHY_2, lteraw.HIERARCHY_1, lteraw.VENDOR, null, null, null, null, null, null, null, null, null, null, null, 
PAGING_ATTEMPTS, REQUEST_RETRIES, lteraw.APN, MCC, MNC, null, null, null, null, OLD_MCC, OLD_MNC, null, null, null, null, null, 
DEACTIVATION_TRIGGER
    from
        #temp_$errTable lteraw,
        dc.$etTable etref,
        dc.$cptTable cptref,
        $ccTable ccref,
        $sccTable sccref,
        dc.DIM_E_SGEH_EVENTRESULT erref,
        dc.DIM_E_SGEH_TAC tacref,
        dc.DIM_E_SGEH_RAT ratref,
        dc.DIM_E_SGEH_SERVICE_REQ_TRIGGER service_req
    where
        lteraw.EVENT_ID = etref.EVENT_ID
        and lteraw.CAUSE_PROT_TYPE *= cptref.CAUSE_PROT_TYPE
        and lteraw.CAUSE_PROT_TYPE *= ccref.CAUSE_PROT_TYPE
        and lteraw.CAUSE_CODE *= ccref.CAUSE_CODE
        and lteraw.SUBCAUSE_CODE *= sccref.SUBCAUSE_CODE
        and lteraw.EVENT_RESULT = erref.EVENT_RESULT
        and lteraw.TAC *= tacref.TAC
        and lteraw.RAT = ratref.RAT
        and lteraw.SERVICE_REQ_TRIGGER *= service_req.SERVICE_REQ_TRIGGER
#end

#macro(CREATE_CC_ANALYSIS_DETAILS_TEMP_TABLE_SGEH $tablesToUseInQuery $table_name_type)
        SELECT
            #if($count > 0)
        top $count
     #end
        * INTO #temp_$table_name_type
        FROM
            (
            #foreach ($rawtable in $tablesToUseInQuery)
             SELECT
                    sgehraw.CAUSE_PROT_TYPE,
                    sgehraw.CAUSE_CODE,
                    sgehraw.SUBCAUSE_CODE,
                    sgehraw.EVENT_ID,
                    sgehraw.EVENT_RESULT,
                    sgehraw.RAT,
                    sgehraw.SERVICE_REQ_TRIGGER,
                    sgehraw.DATETIME_ID,
                    sgehraw.EVENT_TIME,
                    sgehraw.IMSI,
                    sgehraw.TAC,
                    sgehraw.EVENT_SOURCE_NAME,
                    sgehraw.HIERARCHY_3,
                    sgehraw.HIERARCHY_2,
                    sgehraw.HIERARCHY_1,
                    sgehraw.VENDOR,
                    sgehraw.LINKED_NSAPI,
                    sgehraw.PDP_NSAPI_1,
                    sgehraw.PDP_GGSN_IPADDRESS_1,
                    sgehraw.PDP_GGSN_NAME_1,
                    sgehraw.PDP_MS_IPADDRESS_1,
                    sgehraw.PDP_NSAPI_2,
                    sgehraw.PDP_GGSN_IPADDRESS_2,
                    sgehraw.PDP_GGSN_NAME_2,
                    sgehraw.PDP_MS_IPADDRESS_2,
                    sgehraw.PAGING_ATTEMPTS,
                    sgehraw.REQUEST_RETRIES,
                    sgehraw.APN,
                    sgehraw.MCC,
                    sgehraw.MNC,
                    sgehraw.RAC,
                    sgehraw.LAC,
                    sgehraw.UPDATE_TYPE,
                    sgehraw.OLD_SGSN_IPADDRESS,
                    sgehraw.OLD_MCC,
                    sgehraw.OLD_MNC,
                    sgehraw.OLD_RAC,
                    sgehraw.OLD_LAC,
                    sgehraw.TRANSFERRED_PDP,
                    sgehraw.DROPPED_PDP,
                    sgehraw.HLR,
                    sgehraw.DEACTIVATION_TRIGGER
              FROM
             dc.$rawtable sgehraw
                #if(${groupDefinitions})
        ,dc.$groupTable groupref
        #end
                WHERE
        #if(!${groupDefinitions})
            #GET_COLUMNS_WHERE_BY_TABLE("sgehraw" $columns)
            #if ($timerange == "TR_4")
                and #GET_DATE_RANGE_LOCAL()
            #else
                #AND_DATETIME_RANGE()
            #end
        #else
            #GET_JOIN("sgehraw" "groupref" $joinKeys)
            and $groupnameColumn = :$ApplicationConstants.GROUP_NAME_PARAM
            #if ($timerange == "TR_4")
                and #GET_DATE_RANGE_LOCAL()
            #else
                #AND_DATETIME_RANGE()
            #end
        #end
        and sgehraw.CAUSE_PROT_TYPE = :$ApplicationConstants.CAUSE_PROT_TYPE
        and sgehraw.CAUSE_CODE = :$CAUSE_CODE
        and sgehraw.SUBCAUSE_CODE = :$SUBCAUSE_CODE
        and ISNULL(sgehraw.TAC,-1) not in (select TAC from dc.GROUP_TYPE_E_TAC where GROUP_NAME = 'EXCLUSIVE_TAC')
              #if($velocityCount < $tablesToUseInQuery.size())
                   union all
                #end
            #end
            ) AS temp
ORDER BY
    DATETIME_ID DESC;
#end

#macro(CREATE_CC_ANALYSIS_DETAILS_TEMP_TABLE_LTE $tablesToUseInQuery $table_name_type)
        SELECT
            #if($count > 0)
       top $count
     #end
        * INTO #temp_$table_name_type
        FROM
            (
            #foreach ($rawtable in $tablesToUseInQuery)
            SELECT
            lteraw.CAUSE_PROT_TYPE,
            lteraw.CAUSE_CODE,
            lteraw.SUBCAUSE_CODE,
            lteraw.EVENT_ID,
            lteraw.EVENT_RESULT,
            lteraw.RAT,
            lteraw.SERVICE_REQ_TRIGGER,
            lteraw.DATETIME_ID,
            lteraw.EVENT_TIME,
            lteraw.IMSI,
            lteraw.TAC,
            lteraw.EVENT_SOURCE_NAME,
            lteraw.HIERARCHY_3,
            lteraw.HIERARCHY_2,
            lteraw.HIERARCHY_1,
            lteraw.VENDOR,
            lteraw.PAGING_ATTEMPTS,
            lteraw.REQUEST_RETRIES,
            lteraw.APN,
            lteraw.MCC,
            lteraw.MNC,
            lteraw.OLD_MCC,
            lteraw.OLD_MNC,
            lteraw.DEACTIVATION_TRIGGER 
            FROM
            dc.$rawtable lteraw
                #if(${groupDefinitions})
        ,dc.$groupTable groupref
        #end
            WHERE
        #if(!${groupDefinitions})
            #GET_COLUMNS_WHERE_BY_TABLE("lteraw" $columns)
            #if ($timerange == "TR_4")
                and #GET_DATE_RANGE_LOCAL()
            #else
                #AND_DATETIME_RANGE()
            #end
        #else
            #GET_JOIN("lteraw" "groupref" $joinKeys)
            and $groupnameColumn = :$ApplicationConstants.GROUP_NAME_PARAM
            #if ($timerange == "TR_4")
                and #GET_DATE_RANGE_LOCAL()
            #else
                #AND_DATETIME_RANGE()
            #end
        #end
        and lteraw.CAUSE_PROT_TYPE = :$ApplicationConstants.CAUSE_PROT_TYPE
        and lteraw.CAUSE_CODE = :$CAUSE_CODE
        and lteraw.SUBCAUSE_CODE = :$SUBCAUSE_CODE
        and ISNULL(lteraw.TAC,-1) not in (select TAC from dc.GROUP_TYPE_E_TAC where GROUP_NAME = 'EXCLUSIVE_TAC')
            #if($velocityCount < $tablesToUseInQuery.size())
                union all
                #end
        #end
            ) AS temp
ORDER BY
    DATETIME_ID DESC;
#end

#macro(CREATE_CC_ANALYSIS_DETAILS_TEMP_TABLE_SGEH_GROUP_TYPE_E_EVNTSRC $tablesToUseInQuery $table_name_type)
        SELECT
            #if($count > 0)
              top $count
            #end
        * INTO #temp_$table_name_type
        FROM
            (
            #foreach ($rawtable in $tablesToUseInQuery)
                SELECT
                    sgehraw.CAUSE_PROT_TYPE,
                    sgehraw.CAUSE_CODE,
                    sgehraw.SUBCAUSE_CODE,
                    sgehraw.EVENT_ID,
                    sgehraw.EVENT_RESULT,
                    sgehraw.RAT,
                    sgehraw.SERVICE_REQ_TRIGGER,
                    sgehraw.DATETIME_ID,
                    sgehraw.EVENT_TIME,
                    sgehraw.IMSI,
                    sgehraw.TAC,
                    sgehraw.EVENT_SOURCE_NAME,
                    sgehraw.HIERARCHY_3,
                    sgehraw.HIERARCHY_2,
                    sgehraw.HIERARCHY_1,
                    sgehraw.VENDOR,
                    sgehraw.LINKED_NSAPI,
                    sgehraw.PDP_NSAPI_1,
                    sgehraw.PDP_GGSN_IPADDRESS_1,
                    sgehraw.PDP_GGSN_NAME_1,
                    sgehraw.PDP_MS_IPADDRESS_1,
                    sgehraw.PDP_NSAPI_2,
                    sgehraw.PDP_GGSN_IPADDRESS_2,
                    sgehraw.PDP_GGSN_NAME_2,
                    sgehraw.PDP_MS_IPADDRESS_2,
                    sgehraw.PAGING_ATTEMPTS,
                    sgehraw.REQUEST_RETRIES,
                    sgehraw.APN,
                    sgehraw.MCC,
                    sgehraw.MNC,
                    sgehraw.RAC,
                    sgehraw.LAC,
                    sgehraw.UPDATE_TYPE,
                    sgehraw.OLD_SGSN_IPADDRESS,
                    sgehraw.OLD_MCC,
                    sgehraw.OLD_MNC,
                    sgehraw.OLD_RAC,
                    sgehraw.OLD_LAC,
                    sgehraw.TRANSFERRED_PDP,
                    sgehraw.DROPPED_PDP,
                    sgehraw.HLR,
                    sgehraw.DEACTIVATION_TRIGGER
               FROM
               dc.$rawtable sgehraw
                WHERE
        $joinKeys.get(0) in (SELECT $joinKeys.get(0) from dc.$groupTable temp_group where temp_group.${groupnameColumn} = :$ApplicationConstants.GROUP_NAME_PARAM)
               #if ($timerange == "TR_4")
                   and #GET_DATE_RANGE_LOCAL()
               #else
                   #AND_DATETIME_RANGE()
               #end
        and sgehraw.CAUSE_PROT_TYPE = :$ApplicationConstants.CAUSE_PROT_TYPE
        and sgehraw.CAUSE_CODE = :$CAUSE_CODE
        and sgehraw.SUBCAUSE_CODE = :$SUBCAUSE_CODE
        and ISNULL(sgehraw.TAC,-1) not in (select TAC from dc.GROUP_TYPE_E_TAC where GROUP_NAME = 'EXCLUSIVE_TAC')
               #if($velocityCount < $tablesToUseInQuery.size())
                   union all
                #end
               #end
            ) AS temp
ORDER BY
    DATETIME_ID DESC;
#end

#macro(CREATE_CC_ANALYSIS_DETAILS_TEMP_TABLE_LTE_GROUP_TYPE_E_EVNTSRC $tablesToUseInQuery $table_name_type)
        SELECT
            #if($count > 0)
       top $count
      #end
        * INTO #temp_$table_name_type
        FROM
            (
            #foreach ($rawtable in $tablesToUseInQuery)
               SELECT
             lteraw.CAUSE_PROT_TYPE,
            lteraw.CAUSE_CODE,
            lteraw.SUBCAUSE_CODE,
            lteraw.EVENT_ID,
            lteraw.EVENT_RESULT,
            lteraw.RAT,
            lteraw.SERVICE_REQ_TRIGGER,
            lteraw.DATETIME_ID,
            lteraw.EVENT_TIME,
            lteraw.IMSI,
            lteraw.TAC,
            lteraw.EVENT_SOURCE_NAME,
            lteraw.HIERARCHY_3,
            lteraw.HIERARCHY_2,
            lteraw.HIERARCHY_1,
            lteraw.VENDOR,
            lteraw.PAGING_ATTEMPTS,
            lteraw.REQUEST_RETRIES,
            lteraw.APN,
            lteraw.MCC,
            lteraw.MNC,
            lteraw.OLD_MCC,
            lteraw.OLD_MNC,
            lteraw.DEACTIVATION_TRIGGER
               FROM
              dc.$rawtable lteraw
              WHERE
        $joinKeys.get(0) in (SELECT $joinKeys.get(0) from dc.$groupTable temp_group where temp_group.${groupnameColumn} = :$ApplicationConstants.GROUP_NAME_PARAM)
                #if ($timerange == "TR_4")
                   and #GET_DATE_RANGE_LOCAL()
                #else
                   #AND_DATETIME_RANGE()
                #end
        and lteraw.CAUSE_PROT_TYPE = :$ApplicationConstants.CAUSE_PROT_TYPE
        and lteraw.CAUSE_CODE = :$CAUSE_CODE
        and lteraw.SUBCAUSE_CODE = :$SUBCAUSE_CODE
        and ISNULL(lteraw.TAC,-1) not in (select TAC from dc.GROUP_TYPE_E_TAC where GROUP_NAME = 'EXCLUSIVE_TAC')
                #if($velocityCount < $tablesToUseInQuery.size())
                    union all
                #end
             #end
            ) AS temp
ORDER BY
    DATETIME_ID DESC;
#end

begin
#if($rawNonLteTables.size() > 0 && $useNonLteTables)
    #if (($groupTable.toString().indexOf("GROUP_TYPE_E_EVNTSRC") > -1))
#CREATE_CC_ANALYSIS_DETAILS_TEMP_TABLE_SGEH_GROUP_TYPE_E_EVNTSRC($rawNonLteTables "SGEH_ERR_RAW")
    #else
#CREATE_CC_ANALYSIS_DETAILS_TEMP_TABLE_SGEH($rawNonLteTables "SGEH_ERR_RAW")
    #end
#end

#if($rawLteTables.size() > 0 && $useLteTables)
    #if (($groupTable.toString().indexOf("GROUP_TYPE_E_EVNTSRC") > -1))
#CREATE_CC_ANALYSIS_DETAILS_TEMP_TABLE_LTE_GROUP_TYPE_E_EVNTSRC($rawLteTables "LTE_ERR_RAW")
    #else
#CREATE_CC_ANALYSIS_DETAILS_TEMP_TABLE_LTE($rawLteTables "LTE_ERR_RAW")
    #end
#end

#if($csv)
   SET TEMPORARY OPTION Temp_Extract_Name1 = 'csvFileName';
#end


select
    #if($count > 0)
      top $count
    #end
       #if($csv)
             DATEADD(minute,$tzOffset,rawview.EVENT_TIME)AS 'Event Time',
           #else
             rawview.EVENT_TIME AS 'Event Time',
           #end
    rawview.IMSI,
    rawview.TAC,
    isnull(rawview.MANUFACTURER, 'Manufacturer Unknown') AS 'Terminal Make',
    isnull(rawview.Marketing_Name, 'Model Unknown') AS 'Terminal Model',
    rawview.EVENT_ID_DESC AS 'Event Type',
    rawview.EVENT_RESULT_DESC AS 'Event Result',
    isnull(rawview.CAUSE_PROT_TYPE_DESC, '') AS 'Cause Protocol Type',
    rawview.CAUSE_CODE AS 'Cause Code ID',
    isnull(rawview.CAUSE_CODE_DESC, '') AS 'Cause Code',
    isnull(rawview.CAUSE_CODE_HELP, '') AS 'Cause Code Recommended Action',
    rawview.SUBCAUSE_CODE AS 'Sub Cause Code ID',
    isnull(rawview.SUBCAUSE_CODE_DESC, '') AS 'Sub Cause Code',
    isnull(rawview.SUBCAUSE_CODE_HELP, '') AS 'Sub Cause Code Recommended Action',
    rawview.EVENT_SOURCE_NAME AS 'SGSN-MME',
    rawview.RAT_DESC AS 'RAT',
    rawview.HIERARCHY_3 AS 'Controller',
    rawview.HIERARCHY_2 AS 'Radio Node',
    rawview.HIERARCHY_1 AS 'Access Area',
    rawview.VENDOR AS 'RAN Vendor',
    rawview.LINKED_NSAPI AS 'Linked NSAPI',
    rawview.PDP_NSAPI_1 AS 'PDP NSAPI 1',
        (case when (rawview.PDP_GGSN_IPADDRESS_1 is not null) then (case when (rawview.PDP_GGSN_NAME_1 is null) then isnull(rawview.GGSN_NAME,
    cast(convert(unsigned int, substr(rawview.PDP_GGSN_IPADDRESS_1,1,1)) as varchar(30)) || '.' ||
cast(convert(unsigned int, substr(rawview.PDP_GGSN_IPADDRESS_1,2,1)) as varchar(30)) || '.' ||
cast(convert(unsigned int, substr(rawview.PDP_GGSN_IPADDRESS_1,3,1)) as varchar(30)) || '.' ||
cast(convert(unsigned int, substr(rawview.PDP_GGSN_IPADDRESS_1,4,2)) as varchar(30)))
    else rawview.PDP_GGSN_NAME_1 end)else '' end) as PDP_GGSN_NAME_1,
    (case when (rawview.PDP_MS_IPADDRESS_1 is not null) then(
    cast(convert(unsigned int, substr(rawview.PDP_MS_IPADDRESS_1,1,1)) as varchar(30)) || '.' ||
cast(convert(unsigned int, substr(rawview.PDP_MS_IPADDRESS_1,2,1)) as varchar(30)) || '.' ||
cast(convert(unsigned int, substr(rawview.PDP_MS_IPADDRESS_1,3,1)) as varchar(30)) || '.' ||
cast(convert(unsigned int, substr(rawview.PDP_MS_IPADDRESS_1,4,2)) as varchar(30)))
    else '' end) as PDP_MS_IPADDRESS_1 ,
    rawview.PDP_NSAPI_2 AS 'PDP NSAPI 2',
        (case when (rawview.PDP_GGSN_IPADDRESS_2 is not null) then (case when (rawview.PDP_GGSN_NAME_2 is null) then isnull(rawview.GGSN_NAME,
    cast(convert(unsigned int, substr(rawview.PDP_GGSN_IPADDRESS_2,1,1)) as varchar(30)) || '.' ||
cast(convert(unsigned int, substr(rawview.PDP_GGSN_IPADDRESS_2,2,1)) as varchar(30)) || '.' ||
cast(convert(unsigned int, substr(rawview.PDP_GGSN_IPADDRESS_2,3,1)) as varchar(30)) || '.' ||
cast(convert(unsigned int, substr(rawview.PDP_GGSN_IPADDRESS_2,4,2)) as varchar(30)))
    else rawview.PDP_GGSN_NAME_2 end)else '' end) as PDP_GGSN_NAME_2,
    (case when (rawview.PDP_MS_IPADDRESS_2 is not null) then(
    cast(convert(unsigned int, substr(rawview.PDP_MS_IPADDRESS_2,1,1)) as varchar(30)) || '.' ||
cast(convert(unsigned int, substr(rawview.PDP_MS_IPADDRESS_2,2,1)) as varchar(30)) || '.' ||
cast(convert(unsigned int, substr(rawview.PDP_MS_IPADDRESS_2,3,1)) as varchar(30)) || '.' ||
cast(convert(unsigned int, substr(rawview.PDP_MS_IPADDRESS_2,4,2)) as varchar(30)))
    else '' end) as PDP_MS_IPADDRESS_2,
    rawview.PAGING_ATTEMPTS AS 'Paging Attempts',
    rawview.SERVICE_REQ_TRIGGER_DESC AS 'Service Request Trigger',
    rawview.REQUEST_RETRIES AS 'Request Retries',
    rawview.APN,
    rawview.MCC AS 'Network MCC',
    rawview.MNC AS 'Network MNC',
    rawview.RAC,
    rawview.LAC,
    rawview.UPDATE_TYPE AS 'Update Type',
        (case when (rawview.OLD_SGSN_IPADDRESS is not null) then isnull(rawview.SGSN_NAME,
    cast(convert(unsigned int, substr(rawview.OLD_SGSN_IPADDRESS,1,1)) as varchar(30)) || '.' ||
cast(convert(unsigned int, substr(rawview.OLD_SGSN_IPADDRESS,2,1)) as varchar(30)) || '.' ||
cast(convert(unsigned int, substr(rawview.OLD_SGSN_IPADDRESS,3,1)) as varchar(30)) || '.' ||
cast(convert(unsigned int, substr(rawview.OLD_SGSN_IPADDRESS,4,2)) as varchar(30)))
    else '' end) as OLD_SGSN_NAME,
    rawview.OLD_MCC AS 'Old MCC',
    rawview.OLD_MNC AS 'Old MNC',
    rawview.OLD_RAC AS 'Old RAC',
    rawview.OLD_LAC AS 'Old LAC',
    rawview.TRANSFERRED_PDP AS 'Transferred PDP',
    rawview.DROPPED_PDP AS 'Dropped PDP',
    rawview.HLR,
    rawview.DEACTIVATION_TRIGGER AS 'Deactivation Trigger',
    rawview.CAUSE_CODE AS 'SYS_COL_Cause Code Value',
    rawview.SUBCAUSE_CODE AS 'SYS_COL_Sub Cause Code Value',
    rawview.EVENT_RESULT AS 'SYS_COL_Event Result Value',
    rawview.CAUSE_PROT_TYPE AS 'SYS_COL_Cause Protocol Type ID',
    rawview.RAT AS 'RAT ID'
from
    (
#if($rawNonLteTables.size() > 0 && $useNonLteTables)
(
     #CCAD_SGEH_QUERY("SGEH_ERR_RAW" $cptRefForSgeh $etRefForSgeh $ccRefForSgeh $sccRefForSgeh)
)
#end

#if($rawLteTables.size() > 0 && $useLteTables)
    #if($rawNonLteTables.size() > 0 && $useNonLteTables)
                union all
    #end
    (
               #CCAD_LTE_QUERY("LTE_ERR_RAW" $cptRefForLte $etRefForLte $ccRefForLte $sccRefForLte)
     )
#end
    ) as rawview (CAUSE_PROT_TYPE, CAUSE_PROT_TYPE_DESC, CAUSE_CODE, CAUSE_CODE_DESC,CAUSE_CODE_HELP, SUBCAUSE_CODE, SUBCAUSE_CODE_DESC,SUBCAUSE_CODE_HELP, EVENT_ID, EVENT_ID_DESC, EVENT_RESULT, EVENT_RESULT_DESC, RAT, RAT_DESC, SERVICE_REQ_TRIGGER, SERVICE_REQ_TRIGGER_DESC, DATETIME_ID, EVENT_TIME, IMSI, TAC, MANUFACTURER, Marketing_Name, EVENT_SOURCE_NAME, HIERARCHY_3, HIERARCHY_2, HIERARCHY_1, VENDOR, GGSN_NAME, SGSN_NAME, LINKED_NSAPI, PDP_NSAPI_1, PDP_GGSN_IPADDRESS_1, PDP_GGSN_NAME_1, PDP_MS_IPADDRESS_1, PDP_NSAPI_2, PDP_GGSN_IPADDRESS_2, PDP_GGSN_NAME_2, PDP_MS_IPADDRESS_2, PAGING_ATTEMPTS, REQUEST_RETRIES, APN, MCC, MNC, RAC, LAC, UPDATE_TYPE, OLD_SGSN_IPADDRESS, OLD_MCC, OLD_MNC, OLD_RAC, OLD_LAC, TRANSFERRED_PDP, DROPPED_PDP, HLR, DEACTIVATION_TRIGGER)
order by
    DATETIME_ID desc;
end
