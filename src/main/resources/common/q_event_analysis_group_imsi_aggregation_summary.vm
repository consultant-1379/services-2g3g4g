##=============================================================================
##
## Network Analysis : group failure analysis that goes to the raw tables
##
## Description:
##
##    Failure analysis for nominated group
##
## Parameter:
##
## type : one of { APN, TAC, IMSI}
##
## timerange : one of { TR_1, TR_2, TR_3, TR_4}
##
##     TR_1 : normally query against raw events
##     TR_2 : normally query against 1min agg
##     TR_3 : normally query against 15min agg
##     TR_4 : normally query against daily agg
##
## Named PreparedStatement Parameter:
##
##    :dateFrom   starting time
##    :dateTo     ending time
##    :GROUP_NAME nominated group name
##
##=============================================================================


#DEFINE_CONSTANTS()
#SET_GROUP_TYPE($type)

#set($columnsToSelectFromErrRaw=["EVENT_ID","IMSI"])
#set($columnsToSelectFromImsiRaw=["EVENT_ID"])

#set($groupDef = $groupDefinitions.get($groupType))
#set($groupTable = $groupDef.getTableName())
#set($groupnameColumn = $groupDef.getGroupNameColumn())
#set($joinKeys = $groupDef.getGroupKeys())
#set($isgroup=true)

#set($sucViewName="suc")
#set($errViewName="err")

#macro (GET_LIST_OF_COLUMNS_AS_STRING $rawtables $rawview $columnsToIncludeInNewView)
    #foreach ($columnToInclude in $columnsToIncludeInNewView)
        $rawview.$columnToInclude
        #if($velocityCount < $columnsToIncludeInNewView.size())
        ,
        #end
    #end
#end

#macro (PRIVATE_REPLACE_ERR_RAW_VIEW_WITH_RAW_TABLES $rawtables $rawview $columnsToIncludeInNewView)
(
    #set($columns = "#GET_LIST_OF_COLUMNS_AS_STRING($rawtables $rawview $columnsToIncludeInNewView)")
    #foreach ($rawtable in $rawtables)
    select
        $columns
        , COUNT(*) AS no_of_failures
    from dc.$rawtable $rawview
    ,$groupTable temp_group
    where
        temp_group.$groupnameColumn = :$ApplicationConstants.GROUP_NAME_PARAM
        and #GET_JOIN($rawview "temp_group" $joinKeys)
        #if($timerange=="TR_4")
            and #GET_DATE_RANGE_LOCAL()
        #else
            and #GET_DATETIME_RANGE()
        #end
    group by
        $columns
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as temp_$rawview
#end

#macro (PRIVATE_REPLACE_IMSI_RAW_VIEW_WITH_RAW_TABLES $rawtables $rawview $columnsToIncludeInNewView)
(
    #set($columns = "#GET_LIST_OF_COLUMNS_AS_STRING($rawtables $rawview $columnsToIncludeInNewView)")
    #foreach ($rawtable in $rawtables)
    select
        $columns
        , sum(NO_OF_SUCCESSES) AS NO_OF_SUCCESSES
    from dc.$rawtable $rawview
    ,$groupTable temp_group
    where
        temp_group.$groupnameColumn = :$ApplicationConstants.GROUP_NAME_PARAM
        and #GET_JOIN($rawview "temp_group" $joinKeys)
        #if ($timerange=="TR_4")
            and #GET_ADJUSTED_DATETIME_RANGE()
        #else
            and #GET_DATETIME_RANGE()
        #end
    group by
        $columns
        #if($velocityCount < $rawtables.size())
        union all
        #end
    #end
) as temp_$rawview
#end

select
    :$ApplicationConstants.GROUP_NAME_PARAM as SYS_COL_$groupnameColumn,
    isnull(err.EVENT_ID,suc.EVENT_ID) as SYS_COL_EVENT_ID,
    isnull(etref.EVENT_ID_DESC,lteEventType.EVENT_ID_DESC) as EVENT_ID_DESC,
    sum(isnull(NO_OF_ERRORS, 0)) as NO_OF_ERRORS,
    sum(isnull(NO_OF_SUCCESSES,0)) as NO_OF_SUCCESSES,
    NO_OF_ERRORS+NO_OF_SUCCESSES as OCCURRENCES,
    #CALCULATE_KPI_RATIO() AS KPI,
    isnull(NO_OF_TOTAL_ERR_SUBSCRIBERS, 0) as NO_OF_TOTAL_ERR_SUBSCRIBERS
from
    (select
        EVENT_ID,
        SUM(no_of_failures),
        count(distinct(temp_err.IMSI))
    from
        #PRIVATE_REPLACE_ERR_RAW_VIEW_WITH_RAW_TABLES($TECH_PACK_LIST.getAllRawErrTables() "err" $columnsToSelectFromErrRaw)
    group by
        EVENT_ID
    ) as err (EVENT_ID, NO_OF_ERRORS, NO_OF_TOTAL_ERR_SUBSCRIBERS)
    full outer join
    (select
        EVENT_ID,
        sum(NO_OF_SUCCESSES) AS NO_OF_SUCCESSES
    from
        #PRIVATE_REPLACE_IMSI_RAW_VIEW_WITH_RAW_TABLES($TECH_PACK_LIST.getAllRawTablesWithMeasurementType() "suc" $columnsToSelectFromImsiRaw)
    group by
        EVENT_ID
    ) as suc (EVENT_ID, NO_OF_SUCCESSES)
    on (
        #GET_JOIN("suc" "err" ["EVENT_ID"])
    )
    left outer join
        dc.DIM_E_SGEH_EVENTTYPE etref
    on(
        #GET_MULTI_JOIN(["suc","err"] "etref" ["EVENT_ID"])
    )
    left outer join
        dc.DIM_E_LTE_EVENTTYPE lteEventType
    on(
        #GET_MULTI_JOIN(["suc","err"] "lteEventType" ["EVENT_ID"])
    )
group by
    SYS_COL_$groupnameColumn,
    NO_OF_TOTAL_ERR_SUBSCRIBERS,
    SYS_COL_EVENT_ID,
    EVENT_ID_DESC
having
    SYS_COL_EVENT_ID between 0 and 255
    ##EVENT_ID is a tinyint in database
