##=============================================================================
##
## Network Analysis : Group KPI
##
## Description:
##
##   Get the successful and failure events from separate tables/views and join the result to display KPI
##
## Velocity Parameters:
##
## type : one of { APN, TAC}
##
## timerange : one of { TR_1, TR_2, TR_3, TR_4}
##
##     TR_1 : normally query against raw events
##     TR_2 : normally query against 1min agg
##     TR_3 : normally query against 15min agg
##     TR_4 : normally query against daily agg
##
## starttime : starting time of the time serial
##
## endtime : ending time of the time serial
##
## Named Prepared Statement Parameters:
##
##     :dateFrom starting time
##     :dateTo   ending time
##     :groupname group name
##
##
##
##=============================================================================


#DEFINE_CONSTANTS()
#SET_GROUP_TYPE($type)

#if(${type}==$TYPE_APN)
    #set($columns=[$APN])
    #set($agg_t="EVENT_E_SGEH_APN_EVENTID")
#elseif (${type}==$TYPE_TAC)
    #set($columns=[$TAC])
    #set($agg_t="EVENT_E_SGEH_MANUF_TAC_EVENTID")
#elseif(${type}==$TYPE_SGSN)
    #set($columns=[$SGSN])
    #set($agg_t="EVENT_E_SGEH_EVNTSRC_EVENTID")
#elseif(${type}==$TYPE_BSC)
    #set($columns=[$RAT,$VENDOR, $BSC])
    #set($agg_t="EVENT_E_SGEH_VEND_HIER3_EVENTID")
#elseif(${type}==$TYPE_CELL)
    #set($columns=[$RAT,$VENDOR, $BSC,$CELL])
    #set($agg_t="EVENT_E_SGEH_VEND_HIER321_EVENTID")
#end

#set($time = $ApplicationMethods.returnAggregateViewType(${timerange}))
#set($isagg = true)

#set($subview = "dc.EVENT_E_SGEH_ERR_RAW")

#if(${timerange}==$ApplicationConstants.DAY)
	#set($interval=1440)
	#set($errview = "dc.${agg_t}_ERR_DAY")
	#set($sucview = "dc.${agg_t}_SUC_DAY")
#else
	#set($interval=15)
	#set($errview = "dc.${agg_t}_ERR_15MIN")
	#set($sucview = "dc.${agg_t}_SUC_15MIN")
#end

#set($groupDef = $groupDefinitions.get($groupType))
#set($groupTable = $groupDef.getTableName())
#set($groupnameColumn = $groupDef.getGroupNameColumn())
#set($joinKeys = $groupDef.getGroupKeys())

SELECT
    dateformat(chart_times.tmp_st, 'yyyy-mm-dd hh:mm:ss.S') as TS,
    #GET_2G3G_CORE_KPI_VALUES()
from
    (select
        chart_times.tmp_st,
        $groupnameColumn,
        EVENT_ID,
        count(*),
        sum(case when (DEACTIVATION_TRIGGER != 1) then 1 else 0 end),
        sum(ISNULL(PAGING_ATTEMPTS,0))
    from
        #REPLACE_RAW_VIEW_WITH_RAW_TABLES_WITH_OPTIONAL_TAC_EXCLUSION($RAW_ERR_TABLES "temp_err"),
        #GET_CHART_TIMES($starttime $endtime $interval),
        $groupTable temp_group
    where
        temp_group.$groupnameColumn = :$ApplicationConstants.GROUP_NAME_PARAM
        and #GET_JOIN("temp_err" "temp_group" $joinKeys)
        and DATETIME_ID >= tmp_st
        and DATETIME_ID < tmp_et
    group by
        chart_times.tmp_st,
        $groupnameColumn,
        EVENT_ID
    )as err (
        DATETIME_ID,
        $groupnameColumn,
        EVENT_ID,
        NO_OF_ERRORS,
        NO_OF_NET_INIT_DEACTIVATES,
        NO_OF_PAGING_ATTEMPTS
    )
    full outer join
    (select
        chart_times.tmp_st,
        $groupnameColumn,
        EVENT_ID,
        sum(NO_OF_SUCCESSES),
        sum(NO_OF_NET_INIT_DEACTIVATES),
        sum(NO_OF_PAGING_ATTEMPTS)
    from
        $sucview temp_suc,
        #GET_CHART_TIMES($starttime $endtime $interval),
        $groupTable temp_group
    where
        temp_group.$groupnameColumn = :$ApplicationConstants.GROUP_NAME_PARAM
        and #GET_DATETIME_RANGE()
        and #GET_JOIN("temp_suc" "temp_group" $joinKeys)
        and DATETIME_ID >= tmp_st
        and DATETIME_ID < tmp_et
    group by
        chart_times.tmp_st,
        $groupnameColumn,
        EVENT_ID
    ) as suc(
        DATETIME_ID,
        $groupnameColumn,
        EVENT_ID,
        NO_OF_SUCCESSES,
        NO_OF_NET_INIT_DEACTIVATES,
        NO_OF_PAGING_ATTEMPTS
    )
    on (
        #GET_JOIN("err" "suc" ["DATETIME_ID","EVENT_ID"])
    )
    full outer join
    (select
        chart_times.tmp_st,
        :$ApplicationConstants.GROUP_NAME_PARAM as $groupnameColumn,
        IMSI_COUNT from(
        select
                DATETIME_ID,
                count(distinct(IMSI))
            from
            (
        #GET_ALL_IMSIS_FOR_PERIOD_AND_GROUP_ISAGG( $RAW_ERR_TABLES "temp_sub" $interval $groupTable $groupnameColumn $joinKeys $isagg)
        ) as RAW_DATA(
                DATETIME_ID,
                IMSI
            )
            GROUP BY DATETIME_ID
            )  as tmp(
            DATETIME_ID,
            IMSI_COUNT
        ),
        #GET_CHART_TIMES($starttime $endtime $interval)
        where
        DATETIME_ID = tmp_st
    ) as sub (
        DATETIME_ID,
        $groupnameColumn,
        NO_OF_TOTAL_ERR_SUBSCRIBERS
    )
    on(
        #GET_MULTI_JOIN(["err","suc"] "sub" ["DATETIME_ID"])
        and #GET_MULTI_JOIN(["err","suc"] "sub" [$groupnameColumn])
    )
    right outer join
          #GET_CHART_TIMES($starttime $endtime $interval)
      on(
          chart_times.tmp_st = isnull(suc.DATETIME_ID, err.DATETIME_ID)
      )
group by
    TS
order by
    TS