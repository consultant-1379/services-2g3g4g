##=============================================================================
##
## Network Analysis : failure analysis for queries that go directly to the raw tables
##
## type : one of {CELL, TAC}
##
## timerange : one of { TR_2}
##
##     TR_2 : normally query against 1min agg
##
##
##=============================================================================

##-----------------------------------------------------------------------------
## Put together selects from aggregation tables for the event analysis summary view
##
## tableName tableName in question
##-----------------------------------------------------------------------------
#macro(PRINT_COLUMN_IF_NOT_ALREADY_INCLUDED $columnName $existingColumns)
    #if (!$existingColumns.contains($columnName))
        $columnName,
    #end
#end
#macro(SELECT_FROM_AGGREGATION_TABLES $tableName)
    select
         #GET_COLUMNS_BY_TABLE("temp" $columnsForQuery)
        EVENT_ID,
        sum(NO_OF_SUCCESSES) as NO_OF_SUCCESSES
        #if($isgroup)
            ,temp_group.GROUP_NAME
        #end
    from
        dc.$tableName temp
        #if($isgroup)
            ,$groupTable temp_group
        #end
    where
        #GET_DATETIME_RANGE()
        #if($isgroup)
            and temp_group.$groupnameColumn = :$ApplicationConstants.GROUP_NAME_PARAM
            and #GET_JOIN("temp" "temp_group" $joinKeys)
        #else
            and #GET_COLUMNS_WHERE_BY_TABLE("temp" $columnsForQuery)
        #end
    group by
        EVENT_ID,
        #GET_COLUMNS_BY_TABLE_NO_COMMA_TRAILING("temp" $columnsForQuery)
        #if($isgroup)
            ,temp_group.GROUP_NAME
        #end
    having
        EVENT_ID between 0 and 255    ##EVENT_ID is a tinyint in database
#end

#macro(GET_SUPPLIED_COLUMNS $columns)
    #foreach ($column in $columns)
        :$column as $column,
    #end
#end

#DEFINE_CONSTANTS()
#SET_GROUP_TYPE($type)

#if(${type}==$TYPE_APN)
#set($columns=[$APN])
#set($columnsToSelect=[$APN,"EVENT_ID","IMSI","DEACTIVATION_TRIGGER","TAC"])
#elseif (${type}==$TYPE_TAC)
#set($columns=[$TAC])
#set($columnsToSelect=[$TAC,"EVENT_ID","IMSI","DEACTIVATION_TRIGGER"])
#elseif(${type}==$TYPE_SGSN)
#set($columns=[$SGSN])
#set($columnsToSelect=[$SGSN,"EVENT_ID","IMSI","DEACTIVATION_TRIGGER","TAC"])
#elseif(${type}==$TYPE_BSC)
#set($columns=[$RAT,$VENDOR,$BSC])
#set($columnsToSelect=[$RAT,$VENDOR,$BSC,"EVENT_ID","DEACTIVATION_TRIGGER","IMSI","TAC"])
#elseif(${type}==$TYPE_CELL)
    #set($columns=[$RAT,$VENDOR,$BSC,$CELL])
    #set($columnsToSelect=[$RAT,$VENDOR,$BSC,$CELL,"EVENT_ID", "IMSI", "DEACTIVATION_TRIGGER", "TAC"])
#end

#set($RAW_COLLATION_NAME='raw')
##appearances and names to the contrary, this query is used for group queries
#if(${groupDefinitions})
#set($groupDef = $groupDefinitions.get($groupType))
#set($groupTable = $groupDef.getTableName())
#set($groupnameColumn = $groupDef.getGroupNameColumn())
#set($joinKeys = $groupDef.getGroupKeys())
#set($isgroup=true)
#else
#set($isgroup=false)
#end

#set($sucViewName="a")
#set($errViewName="b")
#set($nonDtPdpTables=[$ApplicationConstants.EVENT_E_LTE_TPNAME, $ApplicationConstants.EVENT_E_SGEH_TPNAME])

select
    #if (${type}==$TYPE_TAC)
        isnull( tac.MANUFACTURER, convert(varchar(12),a.TAC) , convert(varchar(12),b.TAC) ) as MANUFACTURER,
        isnull( tac.Marketing_Name, convert(varchar(12),a.TAC) , convert(varchar(12),b.TAC) ) as Marketing_Name,
    #end
    #GET_NOT_NULL_COLUMN(["a","b"] $columnsForQuery)
    isnull(a.EVENT_ID,b.EVENT_ID) as SYS_COL_EVENT_ID,
    isnull(c.EVENT_ID_DESC, lteEventType.EVENT_ID_DESC) as EVENT_ID_DESC,
    isnull(NO_OF_ERRORS, 0) as NO_OF_ERRORS,
    isnull(NO_OF_SUCCESSES,0) as NO_OF_SUCCESSES,
    NO_OF_ERRORS + NO_OF_SUCCESSES as OCCURRENCES,
    #CALCULATE_KPI_RATIO() AS KPI,
    isnull(NO_OF_TOTAL_ERR_SUBSCRIBERS, 0) as NO_OF_TOTAL_ERR_SUBSCRIBERS
from
    (select
        #GET_COLUMNS_BY_TABLE( $RAW_COLLATION_NAME $columnsForQuery)
        EVENT_ID,
        count(*),
        sum(case when (DEACTIVATION_TRIGGER != 1) then 1 else 0 end),count(distinct(${RAW_COLLATION_NAME}.IMSI))
    from
          #if($isgroup)
            #REPLACE_RAW_VIEW_WITH_RAW_TABLES_FILTER_ON_TIME_AND_SPECIFY_COLUMNS($TECH_PACK_LIST.getAllRawErrTables() $RAW_COLLATION_NAME $columnsToSelect)
            ,$groupTable temp_group
        where
            temp_group.$groupnameColumn = :$ApplicationConstants.GROUP_NAME_PARAM
            and #GET_JOIN($RAW_COLLATION_NAME "temp_group" $joinKeys)
            and #GET_TAC_EXCLUSION()
        #else
            #REPLACE_RAW_VIEW_WITH_RAW_TABLES_AND_FILTER_COLUMNS_SPECIFY_COLUMNS($TECH_PACK_LIST.getAllRawErrTables() $RAW_COLLATION_NAME $columnsForQuery $columnsToSelect)
            #if(${useTACExclusion})
                where
                    #GET_TAC_EXCLUSION()
            #end
        #end
    group by
        EVENT_ID,  #GET_COLUMNS_BY_TABLE_NO_COMMA_TRAILING($RAW_COLLATION_NAME $columnsForQuery)
    having
        EVENT_ID is not null
    ) as a (  #GET_COLUMNS($columnsForQuery)
       EVENT_ID, NO_OF_ERRORS, NO_OF_NET_INIT_DEACTIVATES, NO_OF_TOTAL_ERR_SUBSCRIBERS)
    full outer join
    (select
        #GET_COLUMNS_BY_TABLE( $RAW_COLLATION_NAME $columnsForQuery)
        EVENT_ID,
        SUM(NO_OF_SUCCESSES)
    from
        (
            #foreach ($aggTable in $TECH_PACK_LIST.getSucAggregationViewsForTechPacks($nonDtPdpTables))
                #if ( $velocityCount == 1)
                    #SELECT_FROM_AGGREGATION_TABLES($aggTable)
                #else
                    union all
                    #SELECT_FROM_AGGREGATION_TABLES($aggTable)
                #end
            #end
            )as raw
    group by
        EVENT_ID,
        #GET_COLUMNS_BY_TABLE_NO_COMMA_TRAILING($RAW_COLLATION_NAME $columnsForQuery)
    having
        EVENT_ID is not null
    ) as b (#GET_COLUMNS($columnsForQuery) EVENT_ID, NO_OF_SUCCESSES)
    on ( #GET_JOIN ('a' 'b' $columnsForQuery) and a.EVENT_ID = b.EVENT_ID)
    left outer join
        dc.DIM_E_SGEH_EVENTTYPE c
    on(c.EVENT_ID=isnull(a.EVENT_ID, b.EVENT_ID)
      #if($eventID)
        and c.EVENT_ID = :eventID
      #end
    )
    left outer join    dc.DIM_E_LTE_EVENTTYPE lteEventType
    on(
        lteEventType.EVENT_ID=isnull(a.EVENT_ID, b.EVENT_ID)
        #if($eventID)
            and lteEventType.EVENT_ID = :eventID
        #end
    )
    #if (${type}==$TYPE_TAC)
        left outer join
            dc.DIM_E_SGEH_TAC tac
        on(
            tac.TAC=isnull(a.TAC, b.TAC)
        )
    #end
where
    EVENT_ID_DESC <> ''
group by
    SYS_COL_EVENT_ID,
    EVENT_ID_DESC,
    #GET_COLUMNS($columnsForQuery)
    NO_OF_ERRORS,
    NO_OF_SUCCESSES,
    NO_OF_TOTAL_ERR_SUBSCRIBERS
    #if (${type}==$TYPE_TAC)
        ,
    MANUFACTURER,
    Marketing_Name
    #end
having
    SYS_COL_EVENT_ID between 0 and 255
