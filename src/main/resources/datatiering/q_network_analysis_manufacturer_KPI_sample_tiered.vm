##=============================================================================
##
## Network Analysis : KPI
##
## Description:
##
##   Get the successful and failure events from separate tables/views and join the result to display KPI##
##
## Velocity Parameters:
##
## type : one of { APN, BSC, CELL, SGSN, TAC}
##
## timerange : one of { TR_1, TR_2, TR_3, TR_4}
##
##     TR_1 : normally query against raw events
##     TR_2 : normally query against 1min agg
##     TR_3 : normally query against 15min agg
##     TR_4 : normally query against daily agg
##
## count : plot of time serial
##
## interval : interval between every two plots
##i
## starttime : starting time of the time serial
##
## Named Prepared Statement Parameters:
##
##     :dateFrom starting time
##     :dateTo   ending time
##
##     :column1
##     :column2
##     :column3  search keys    
##
##
##=============================================================================

#DEFINE_CONSTANTS()

#**
 * For use in the q_network_analysis_KPI_sample.vm, where special consideration is required for MANUFACTURER queries,
 * as the MANUFACTURER column exists in multiple tables
 *
 * If type is MANUFACTURER, this method will return will return 
 *        tac.MANUFACTURER,
 * otherwise, it just calls #GET_COLUMNS
 *
 * Note, not passign in $columns in as a parameter - doing so causes weird SQL errors, and it seems to pick
 * up on the value of $columns anyhow
 *
 * @param $type 
 *#
#macro(GET_TAC_MANUFACTURER_OR_PLAIN_GET_COLUMNS $type)
    #if($type==$ApplicationConstants.TYPE_MAN)
        tac.MANUFACTURER,
    #else
        #GET_COLUMNS($columns)
    #end
#end

#**
 * For use in the q_network_analysis_KPI_sample.vm, where special consideration is required for MANUFACTURER queries,
 * as the MANUFACTURER column exists in multiple tables
 *
 * If type is MANUFACTURER, this method will return will return
 *        tac.MANUFACTURER=:MANUFACTURER and $shortTableName.TAC = tac.TAC
 * otherwise, it just calls #GET_COLUMNS_WHERE
 *
 * Note, not passign in $columns in as a parameter - doing so causes weird SQL errors, and it seems to pick
 * up on the value of $columns anyhow
 *
 * @param $type
 * @param $eventTableName
 *#

#if(${type}==$TYPE_APN)
	#set($columns=[$APN])
	#set($agg_t="EVENT_E_SGEH_APN_EVENTID")
#elseif (${type}==$TYPE_TAC)
	#set($columns=[$TAC])
	#set($agg_t="EVENT_E_SGEH_MANUF_TAC_EVENTID")
#elseif(${type}==$ApplicationConstants.TYPE_MAN)
	#set($columns=[$ApplicationConstants.TYPE_MAN])
	#set($agg_t="EVENT_E_SGEH_MANUF_TAC_EVENTID")
#elseif(${type}==$TYPE_SGSN)
	#set($columns=[$SGSN])
	#set($agg_t="EVENT_E_SGEH_EVNTSRC_EVENTID")
#elseif(${type}==$TYPE_BSC)
	#set($columns=[$RAT,$VENDOR, $BSC])
	#set($agg_t="EVENT_E_SGEH_VEND_HIER3_EVENTID")
#elseif(${type}==$TYPE_CELL)
	#set($columns=[$RAT,$VENDOR, $BSC,$CELL])
	#set($agg_t="EVENT_E_SGEH_VEND_HIER321_EVENTID")
#end

#set($time = $ApplicationMethods.returnAggregateViewType(${timerange}))
#set($subview = "dc.EVENT_E_SGEH_ERR_RAW")

#if(${timerange}==$ApplicationConstants.DAY)
	#set($interval=1440)
	#set($errview = "dc.${agg_t}_ERR_DAY")
	#set($sucview = "dc.${agg_t}_SUC_DAY")
#else
	#set($interval=15)
	#set($errview = "dc.${agg_t}_ERR_15MIN")
	#set($sucview = "dc.${agg_t}_SUC_15MIN")
#end




#macro (REPLACE_ERROR_RAW_VIEW_WITH_RAW_TABLES_WITH_OPTIONAL_TAC_EXCLUSION $rawtables $rawview)
(
    #foreach ($rawtable in $rawtables)
    	select
            count(*) as Total,
            EVENT_ID,
            chart_times.tmp_st as tmp_st,
            sum(CASE WHEN ( DEACTIVATION_TRIGGER != 1 ) THEN 1 ELSE 0 END )AS DEACTIVATION_TRIGGER,
            sum(PAGING_ATTEMPTS) as PAGING_ATTEMPTS,
            tac
    	from dc.$rawtable tab,
    		#GET_CHART_TIMES($starttime $endtime $interval)
    	where
        	tab.DATETIME_ID >= chart_times.tmp_st
        	AND tab.DATETIME_ID < chart_times.tmp_et
        	AND EVENT_ID IS NOT NULL
        	#if ($type != $ApplicationConstants.TYPE_MAN)
        		and #GET_TAC_EXCLUSION_WITH_TABLE_NAME()
        	#end
        group by
        	EVENT_ID,
        	chart_times.tmp_st,
        	tac
        #if($velocityCount < $rawtables.size())
        	union all
        #end
    #end
) as $rawview
#end

#macro(GET_COLUMNS_WITH_TABLE_PREFIX $columns $table)
    #foreach ($column in $columns)
        $table.$column,
    #end
#end

#macro(GET_COLUMNS_WHERE_WITH_TABLE_PREFIX $columns $table)
    #foreach ($column in $columns)
        #if ( $velocityCount <= 1)
            $table.$column = :$column
        #else
        and $table.$column = :$column
        #end
    #end
#end

#macro(GET_TAC_EXCLUSION_WITH_TABLE_NAME )
    ISNULL(tab.TAC,-1) not in (select TAC from dc.GROUP_TYPE_E_TAC where GROUP_NAME = 'EXCLUSIVE_TAC')
#end

SELECT
    dateformat(chart_times.tmp_st, 'yyyy-mm-dd hh:mm:ss.S') as TS,
    #GET_2G3G_CORE_KPI_VALUES()
from
     (select
        temp_err.tmp_st,
        #GET_COLUMNS_WITH_TABLE_PREFIX($columns "tac_table")
        temp_err.EVENT_ID,
        sum(temp_err.Total),
        sum(temp_err.DEACTIVATION_TRIGGER),
        sum(isnull(temp_err.PAGING_ATTEMPTS,0))
    from
        #REPLACE_ERROR_RAW_VIEW_WITH_RAW_TABLES_WITH_OPTIONAL_TAC_EXCLUSION($RAW_ERR_TABLES "temp_err"),
        dc.DIM_E_SGEH_TAC tac_table
    where         
        #GET_COLUMNS_WHERE_WITH_TABLE_PREFIX($columns "tac_table")
        and temp_err.tac = tac_table.tac
    group by
        temp_err.tmp_st,
        #GET_COLUMNS_WITH_TABLE_PREFIX($columns "tac_table")
        temp_err.EVENT_ID  
    )as err (
        DATETIME_ID,
        #GET_COLUMNS($columns)
        EVENT_ID,
        NO_OF_ERRORS,
        NO_OF_NET_INIT_DEACTIVATES,
        NO_OF_PAGING_ATTEMPTS
    )
    full outer join
    (select
        chart_times.tmp_st,
        #GET_COLUMNS($columns)
        EVENT_ID,
        sum(NO_OF_SUCCESSES),
        sum(NO_OF_NET_INIT_DEACTIVATES),
        sum(NO_OF_PAGING_ATTEMPTS)
    from
        $sucview temp_suc,
        #GET_CHART_TIMES($starttime $endtime $interval)
    where
        #GET_COLUMNS_WHERE($columns)
        and #GET_DATETIME_RANGE()
        and DATETIME_ID >= chart_times.tmp_st
        and DATETIME_ID < chart_times.tmp_et
        AND EVENT_ID IS NOT NULL
    group by
        tmp_st,
        #GET_COLUMNS($columns)
        EVENT_ID
    ) as suc(
        DATETIME_ID,
        #GET_COLUMNS($columns)
        EVENT_ID,
        NO_OF_SUCCESSES,
        NO_OF_NET_INIT_DEACTIVATES,
        NO_OF_PAGING_ATTEMPTS
    )
    on (
        #GET_JOIN("err" "suc" ["DATETIME_ID","EVENT_ID"])
    )
    full outer join
    (select
        chart_times.tmp_st,
        #GET_TAC_MANUFACTURER_OR_PLAIN_GET_COLUMNS_AS( $type ),
        IMSI_COUNT from(
        select
            DATETIME_ID,
            count(distinct(IMSI))
    	from (
        	#GET_ALL_IMSIS_FOR_PERIOD($RAW_ERR_TABLES "temp_sub" $interval)
    	) as RAW_DATA(DATETIME_ID, IMSI)
    	GROUP BY
    		DATETIME_ID
    	) as tmp(
        	DATETIME_ID,
        	IMSI_COUNT
    	),#GET_CHART_TIMES($starttime $endtime $interval)
    where
        DATETIME_ID = tmp_st
    ) as sub
    (
    DATETIME_ID,

    #if($type==$ApplicationConstants.TYPE_MAN)
        MANUFACTURER,
    #else
        #GET_COLUMNS($columns)
    #end
    NO_OF_TOTAL_ERR_SUBSCRIBERS
    )
    on(
        #GET_MULTI_JOIN(["err","suc"] "sub" ["DATETIME_ID"])
        and #GET_MULTI_JOIN(["err","suc"] "sub" $columns)
    )
    RIGHT OUTER JOIN
       #GET_CHART_TIMES($starttime $endtime $interval)
    on(
          chart_times.tmp_st = isnull(suc.DATETIME_ID, err.DATETIME_ID)
    )
group by
    TS
order by
    TS